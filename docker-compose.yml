# Docker Compose para Dashboard IT - Clínica Bonsana
# Configuración completa con todos los servicios

version: '3.8'

services:
  # Aplicación principal
  dashboard:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: dashboard_it_bonsana
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - HOST=0.0.0.0
      - PORT=5000
      - WORKERS=4
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://dashboard_user:dashboard_pass@postgres:5432/dashboard_db
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    depends_on:
      - redis
      - postgres
    networks:
      - dashboard_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx como reverse proxy
  nginx:
    image: nginx:1.24-alpine
    container_name: dashboard_nginx
    restart: unless-stopped
    ports:
      - "10080:80"
      - "10443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - dashboard
    networks:
      - dashboard_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Redis para cache y sesiones
  redis:
    image: redis:7.0-alpine
    container_name: dashboard_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password_change_this
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - dashboard_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # PostgreSQL para datos de producción
  postgres:
    image: postgres:15-alpine
    container_name: dashboard_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=dashboard_db
      - POSTGRES_USER=dashboard_user
      - POSTGRES_PASSWORD=dashboard_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=es_ES.UTF-8 --lc-ctype=es_ES.UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
      - ./backups/postgres:/backups
    networks:
      - dashboard_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dashboard_user -d dashboard_db"]
      interval: 30s
      timeout: 5s
      retries: 5

  # Monitoreo con Prometheus (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: dashboard_prometheus
    restart: unless-stopped
    ports:
      - "10090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - dashboard_network
    profiles:
      - monitoring

  # Grafana para visualización (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: dashboard_grafana
    restart: unless-stopped
    ports:
      - "10300:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password_change_this
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - dashboard_network
    profiles:
      - monitoring

  # Backup automático
  backup:
    image: postgres:15-alpine
    container_name: dashboard_backup
    restart: "no"
    environment:
      - PGPASSWORD=dashboard_pass
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - dashboard_network
    command: /backup.sh
    profiles:
      - backup

# Volúmenes persistentes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Red personalizada
networks:
  dashboard_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16